记录日期：12月13日

今日目标：
1.在公司管理系统中实现基于用户名的用户信息修改功能。
2.通过权限管理限制部门经理和 CEO 的操作权限
3.实现安全的 SQL 查询，保证功能正确运行。
4.修改界面，去除不必要的查询功能，只保留新增的用户所属部门查询功能。
实验过程：
1.数据库连接问题排查与修复：
find_library(MYSQLCPP_LIB mysqlcppconn)
target_link_libraries(MySQLBackendProject ${MYSQLCPP_LIB})


2.用户权限管理与操作功能
·   部门经理：仅能修改、添加、删除自己部门的人员信息。
·   CEO：具备修改所有用户信息的权限，并可修改部门经理的信息。

3.CEO 修改用户信息失败
CEO 登录后无法修改其他用户信息，提示 “修改失败，检查权限或用户名是否正确”。
修改 SQL 语句，忽略大小写匹配：
UPDATE users SET email = ? WHERE LOWER(name) = LOWER(?);

4.使用临时表的问题
·  讨论了在子查询中使用临时表解决权限验证与数据更新冲突的问题。
·  确认临时表的生命周期：在单次查询执行后即销毁，需要每次重新创建。
·  计划后续优化 SQL 查询逻辑，避免频繁创建临时表。


5.用户登录功能实现
· 添加 hashPassword 函数，对输入密码使用 SHA-256 进行加密，确保安全验证：
std::string hashPassword(const std::string &password);

·  实现登录验证：用户输入用户名和密码后，程序与数据库中已存储的 SHA-256 加密密码进行比对。
今日结果：
1.数据库连接成功，用户登录功能实现。
2.权限管理初步实现，部门经理和 CEO 操作功能区分。
3.遗留问题：CEO 修改用户信息功能未完全正常，需进一步排查 SQL 查询。
